@page "/movies"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.QuickGrid
@inject BlazorWebAppMovies.Data.BlazorWebAppMoviesContext DB
@using BlazorWebAppMovies.Models

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <input type="search" @bind="TitleFilter" />
    <button @onclick="FilterMovies">Search</button>
</p>

<p>
    <a href="movies/create">Create New</a>
</p>

<QuickGrid Class="table" Items="@movies" Pagination="@pagination">
    <PropertyColumn Property="movie => movie.Title" Sortable="true" />
    <PropertyColumn Property="movie => movie.ReleaseDate" Title="Release Date" />
    <PropertyColumn Property="movie => movie.Genre" />
    <PropertyColumn Property="movie => movie.Price" />
    <PropertyColumn Property="movie => movie.Rating" />

    <TemplateColumn Context="movie">
        <a href="@($"movies/edit?id={movie.Id}")">Edit</a> |
        <a href="@($"movies/details?id={movie.Id}")">Details</a> |
        <a href="@($"movies/delete?id={movie.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@pagination" />

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Movie>? movies;

    [SupplyParameterFromQuery]
    public string? TitleFilter { get; set; }

    protected override void OnParametersSet()
    {
        FilterMovies();
    }

    private void FilterMovies()
    {
        if (!string.IsNullOrEmpty(TitleFilter))
        {
            movies = DB.Movie.Where(
                s => !string.IsNullOrEmpty(s.Title) ? 
                    s.Title.Contains(TitleFilter) : false);
        }
        else
        {
            movies = DB.Movie;
        }
    }
}
