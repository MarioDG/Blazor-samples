@page "/data-processing"
@inject IHttpClientFactory ClientFactory

<PageTitle>Data Processing</PageTitle>

<h1>Data Processing</h1>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name! You're authenticated, so processing data will succeed.</p>
    </Authorized>
    <NotAuthorized>
        <p>Hello! You're <em>NOT</em> authenticated, so processing data will fail.</p>
    </NotAuthorized>
</AuthorizeView>

<EditForm Model="Model" OnSubmit="Submit" FormName="ProcessData">
    <div>
        <label>
            Message:
            <InputText @bind-Value="Model!.Message" />
        </label>
    </div>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

<div>
    @result
</div>

@code {
    private string? result;

    [SupplyParameterFromForm]
    public FormModel? Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private async Task Submit()
    {
        var client = ClientFactory.CreateClient("Auth");

        try
        {
            var response = await client.PostAsJsonAsync<FormModel>("data-processing", Model!);

            response.EnsureSuccessStatusCode();

            result = $"The data was processed by the server! The server indicates that the message is {response.Content.ReadAsStringAsync().Result} long.";
        }
        catch (HttpRequestException ex)
        {
            result = "The server didn't respond with a 200 (Success) status code.";
        }
    }

    public class FormModel
    {
        public string Message { get; set; } = string.Empty;
    }
}
